{"version":3,"sources":["CitySearch.js","NumberOfEvents.js","Event.js","EventList.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CitySearch","state","query","suggestions","showSuggestions","undefined","handleInputChanged","event","value","target","props","locations","filter","location","toUpperCase","indexOf","setState","handleItemClicked","suggestion","updateEvents","className","type","this","onChange","onFocus","style","display","map","onClick","Component","NumberOfEvents","numberOfEvents","numberOfEventsShown","handleOnChange","e","Event","showDetails","handleButtonClicked","summary","start","dateTime","timeZone","description","EventList","events","id","extractLocations","Set","getAccessToken","a","accessToken","localStorage","getItem","checkToken","tokenCheck","error","removeItem","searchParams","URLSearchParams","window","search","get","code","axios","results","authUrl","data","href","getToken","fetch","then","res","json","catch","result","getEvents","NProgress","navigator","onLine","done","JSON","parse","token","removeQuery","url","setItem","stringify","history","pushState","pathname","newurl","protocol","host","encodeCode","encodeURIComponent","access_token","App","locationEvents","mounted","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.22f4de34.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n  state = {\n    query: \"\",\n    suggestions: [],\n    showSuggestions: undefined\n  };\n\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter(\n      (location) => {\n        return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n      }\n    );\n    this.setState({\n      query: value,\n      suggestions\n    });\n  };\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion,\n      showSuggestions: false\n    });\n    this.props.updateEvents(suggestion);\n  };\n\n  render() {\n\n\n    return (\n      <div className=\"CitySearch\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n          onFocus={() => {\n            this.setState({\n              showSuggestions: true\n            });\n          }}\n        />\n        <ul\n          className=\"suggestions\"\n          style={\n            this.state.showSuggestions ?\n              {} :\n              { display: 'none' }\n          }\n        >\n          {\n            this.state.suggestions.map(\n              (suggestion) => (\n                <li\n                  key={suggestion}\n                  onClick={() => this.handleItemClicked(suggestion)}\n                >\n                  {suggestion}\n                </li>\n              )\n            )\n          }\n          <li\n            key='all'\n            onClick={() => this.handleItemClicked(\"all\")}\n          >\n            <b>See all cities</b>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;\n","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n  state = {\n    numberOfEvents: 0,\n    numberOfEventsShown: 32\n  };\n\n  handleOnChange = (e) => {\n    const value = e.target.value;\n\n    this.setState({\n      numberOfEvents: value,\n      numberOfEventsShown: value\n    });\n\n  };\n\n\n  render() {\n\n    return (\n      <div className=\"NumberOfEvents\">\n        <p>Number of Events</p>\n        <input\n          type=\"number\"\n          className=\"number\"\n          onChange={this.handleOnChange}\n          value={this.numberOfEvents}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\n\nclass Event extends Component {\n\n  state = {\n    showDetails: false\n  };\n\n  handleButtonClicked = () => {\n    this.setState(state => ({\n      showDetails: !state.showDetails\n    }));\n  };\n\n\n  render() {\n\n    const { event } = this.props;\n\n    return (\n      <div className=\"Event\">\n        <h1>{event.summary}</h1>\n        <p>{event.start.dateTime} ({event.timeZone})</p>\n        <p>@{event.summary} | {event.location}</p>\n        <p className={\n          this.state.showDetails ?\n            \"event__description--show\" :\n            \"event__description--hide\"\n        }>\n          {this.props.event.description}\n        </p>\n        <button\n          className={\n            this.state.showDetails ?\n              \"button__show-details\" :\n              \"button__hide-details\"\n          }\n          onClick={() => this.handleButtonClicked()}\n        >\n          {\n            this.state.showDetails ?\n              'Hide Details' :\n              'Show Details'\n          }\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Event;\n","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n\n  render() {\n\n    const { events } = this.props;\n\n    return (\n\n      <ul className=\"EventList\" >\n        {\n          events.map(\n            event =>\n\n              <li key={event.id}>\n                < Event event={event} />\n              </li>\n\n          )\n        }\n      </ul>\n\n    );\n  }\n\n}\n\nexport default EventList;\n","import { mockData } from \"./mock-data\";\nimport axios from \"axios\";\nimport NProgress from \"nprogress\";\n\nexport const extractLocations = (events) => {\n  var extractLocations = events.map((event) => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem(\"access_token\");\n\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const results = await axios.get(\n        \"https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\"\n      );\n      const { authUrl } = results.data;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\n\nconst checkToken = async (accessToken) => {\n  const result = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  )\n    .then((res) => res.json())\n    .catch((error) => error.json());\n\n  return result;\n};\n\nexport const getEvents = async () => {\n  NProgress.start();\n\n  // if (window.location.href.startsWith(\"http://localhost\")) {\n  //   NProgress.done();\n  //   return mockData;\n  // }\n\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"lastEvents\");\n    NProgress.done();\n    return {\n      events: JSON.parse(events).events,\n      locations: extractLocations(JSON.parse(events).events),\n    };\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url =\n      \"https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/\" +\n      token;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n    NProgress.done();\n    return result.data.events;\n  }\n};\n\nconst removeQuery = () => {\n  if (window.history.pushState && window.location.pathname) {\n    var newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\nconst getToken = async (code) => {\n  const encodeCode = encodeURIComponent(code);\n  const { access_token } = await fetch(\n    \"https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/token/\" +\n    encodeCode\n  )\n    .then((res) => {\n      return res.json();\n    })\n    .catch((error) => error);\n\n  access_token && localStorage.setItem(\"access_token\", access_token);\n\n  return access_token;\n};\n\n\n// import { mockData } from './mock-data';\n// import axios from 'axios';\n// import NProgress from 'nprogress';\n\n// export const extractLocations = (events) => {\n//   let extractLocations = events.map(\n//     (event) => event.location\n//   );\n//   let locations = [\n//     ...new Set(extractLocations)\n//   ];\n//   return locations;\n// };\n\n// const removeQuery = () => {\n\n//   if (window.history.pushState && window.location.pathname) {\n//     let newURL =\n//       window.location.protocol +\n//       \"//\" +\n//       window.location.host +\n//       window.location.pathname;\n//     window.history.pushState(\"\", \"\", newURL);\n//   }\n\n// };\n\n// const getToken = async (code) => {\n//   const encodeCode = encodeURIComponent(code);\n//   const { access_token } = await fetch(\n//     `https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`\n//   )\n//     .then(\n//       (res) => {\n//         return res.json();\n//       }\n//     )\n//     .catch(\n//       (error) => error\n//     );\n\n//   access_token && localStorage.setItem(\n//     'access_token',\n//     access_token\n//   );\n\n//   return access_token;\n// };\n\n// const checkToken = async (accessToken) => {\n//   const result = await fetch(\n//     `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n//   )\n//     .then(\n//       (res) => res.json()\n//     ).catch(\n//       (error) => error.json()\n//     );\n\n//   return result;\n// };\n\n// export const getEvents = async () => {\n\n//   NProgress.start();\n\n//   // if (window.location.href.startsWith('http://localhost')) {\n//   //   NProgress.done();\n//   //   return mockData;\n//   // }\n\n//   const token = await getAccessToken();\n\n//   if (token) {\n//     removeQuery();\n//     const url = `https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${token}`;\n//     const result = await axios.get(url);\n\n//     if (result.data) {\n//       let locations = extractLocations(result.data.events);\n//       localStorage.setItem(\n//         'lastEvents',\n//         JSON.stringify(result.data)\n//       );\n//       localStorage.setItem(\n//         'locations',\n//         JSON.stringify(locations)\n//       );\n//     }\n//     NProgress.done();\n//     return result.data.events;\n//   }\n// };\n\n\n// export const getAccessToken = async () => {\n\n//   const accessToken = localStorage.getItem('access_token');\n//   const tokenCheck = accessToken && (await checkToken(accessToken));\n\n//   if (!accessToken || tokenCheck.error) {\n//     await localStorage.removeItem('access_token');\n\n//     const searchParams = new URLSearchParams(window.location.search);\n//     const code = await searchParams.get('code');\n\n//     if (!code) {\n//       const results = await axios.get(\n//         'https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url'\n//       );\n//       const { authURL } = results.data;\n//       return (\n//         window.location.href = authURL\n//       );\n//     }\n//     return code && getToken(code);\n//   }\n\n//   return getAccessToken;\n// };\n\n\n// export const getAuth = () => {\n\n// };;\n\n\n// // export const getAccessToken = async () => {\n\n// //   const accessToken = localStorage.getItem('access_token');\n// //   const tokenCheck = accessToken && (await checkToken(accessToken));\n\n// //   if (!accessToken || tokenCheck.error) {\n// //     await localStorage.removeItem('access_token');\n\n// //     const searchParams = new URLSearchParams(window.location.search);\n// //     const code = await searchParams.get('code');\n\n// //     if (!code) {\n// //       const results = await axios.get(\n// //         'https://3m5d2he177.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url'\n// //       );\n// //       const { authURL } = results.data;\n// //       return (\n// //         window.location.href = authURL\n// //       );\n// //     }\n// //     return code && getToken(code);\n// //   }\n// //   return getAccessToken;\n// // };","import React, { Component } from 'react';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport EventList from './EventList';\nimport { getEvents, extractLocations } from './api';\n\nimport './App.css';\nimport './nprogress.css';\n\nclass App extends Component {\n\n  state = {\n    events: [],\n    locations: []\n  };\n\n  updateEvents = (location) => {\n    getEvents()\n      .then(\n        (events) => {\n          const locationEvents = (location === \"all\") ?\n            events :\n            events.filter(\n              (event) => (\n                event.location === location\n              )\n            );\n          this.setState({\n            events: locationEvents\n          });\n        }\n      );\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents()\n      .then(\n        (events) => {\n\n          if (this.mounted) {\n\n            this.setState({\n              events,\n              locations: extractLocations(events)\n            });\n          }\n        }\n      );\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n        <CitySearch\n          locations={this.state.locations}\n          updateEvents={this.updateEvents}\n        />\n        <NumberOfEvents />\n        <EventList events={this.state.events} />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}